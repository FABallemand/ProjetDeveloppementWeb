<?php

namespace App\DataFixtures;

use App\Entity\Shoe;
use App\Entity\Cupboard;
use App\Entity\Member;
use App\Entity\Shelf;
use App\Entity\User;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;
use Doctrine\Common\DataFixtures\DependentFixtureInterface;

class AppFixtures extends Fixture implements DependentFixtureInterface
{
    public function getDependencies()
    {
        return [
            UserFixtures::class,
        ];
    }

    // Defines reference names for instances of Member
    private const TEST_MEMBER_1 = 'test-member-1';
    private const TEST_MEMBER_2 = 'test-member-2';
    private const FABIEN = 'fabien';

    // Defines reference names for instances of Cupboard
    private const TEST_CUPBOARD_1 = 'test-cupboard-1';
    private const TEST_CUPBOARD_2 = 'test-cupboard-2';
    private const SMELLY_CUPBOARD = 'smelly-cupboard';

    // Defines reference names for instances of Cupboard
    private const TEST_SHELF_1 = 'test-shelf-1';
    private const TEST_SHELF_2 = 'test-shelf-2';
    private const BEAUTIFUL_SHELF = 'beautiful-shelf';

    /**
     * Generates initialization data for cupboards : [cupboard_reference, name, member_reference]
     * @return \\Generator
     */
    private static function getCupboardsData()
    {
        yield [self::TEST_CUPBOARD_1, "Test Cupboard 1", self::TEST_MEMBER_1];
        yield [self::TEST_CUPBOARD_2, "Test Cupboard 2", self::TEST_MEMBER_2];

        yield [self::SMELLY_CUPBOARD, "Smelly Cupboard", self::FABIEN];
    }

    /**
     * Generates initialization data for shoes: [brand, model, cupboard_reference, shelf_reference]
     * @return \\Generator
     */
    private static function getShoesData()
    {
        yield ["Test Brand 1", "", self::TEST_CUPBOARD_1, self::TEST_SHELF_1];
        yield ["Test Brand 2", "Model 1", self::TEST_CUPBOARD_1, self::TEST_SHELF_2];

        yield ["Kalenji", "Run Active", self::SMELLY_CUPBOARD, self::BEAUTIFUL_SHELF];
        yield ["Kalenji", "kiprun XT7", self::SMELLY_CUPBOARD, self::BEAUTIFUL_SHELF];
        yield ["Asics", "Gel-tarbuco 11", self::SMELLY_CUPBOARD, self::BEAUTIFUL_SHELF];
        yield ["Quechua", "", self::SMELLY_CUPBOARD, self::BEAUTIFUL_SHELF];
        yield ["Salomon", "X Ultra Mid 3 GTX", self::SMELLY_CUPBOARD, self::BEAUTIFUL_SHELF];
    }

    /**
     * Generates initialization data for members: [member_reference, name, age, user_email]
     * @return \\Generator
     */
    private static function getMembersData()
    {
        yield [self::TEST_MEMBER_1, "Test Member 1", 123, "user_1@localhost"];
        yield [self::TEST_MEMBER_2, "Test Member 2", 666, "user_2@localhost"];

        yield [self::FABIEN, "Fabien", 21, "fabien@localhost"];
    }

    /**
     * Generates initialization data for shelves: [shelf_reference, name, description, published, member_reference]
     * @return \\Generator
     */
    private static function getShelvesData()
    {
        yield [self::TEST_SHELF_1, "Test Shelf 1", "This is test shelf 1", false, self::TEST_MEMBER_1];
        yield [self::TEST_SHELF_2, "Test Shelf 2", "This is test shelf 2", true, self::TEST_MEMBER_2];

        yield [self::BEAUTIFUL_SHELF, "Beautiful shelf", "This is a beautiful shelf", true, self::FABIEN];
    }

    public function load(ObjectManager $manager)
    {
        // $inventoryRepo = $manager->getRepository(Cupboard::class);

        foreach (self::getMembersData() as [$memberRreference, $name, $age, $userEmail]) {
            $member = new Member();
            $member->setName($name);
            $member->setAge($age);
            if ($userEmail) {
                $user = $manager->getRepository(User::class)->findOneByEmail($userEmail);
                if ($user) {
                    $member->setUser($user);
                }
            }
            $manager->persist($member);

            // Once the Member instance has been saved to DB
            // it has a valid ID generated by Doctrine, and can thus
            // be saved as a future reference
            $this->addReference($memberRreference, $member);
        }

        foreach (self::getCupboardsData() as [$cupboardReference, $name, $memberRreference]) {
            $cupboard = new Cupboard();
            $cupboard->setName($name);
            // Attribute cupboard to member
            $member = $this->getReference($memberRreference);
            $member->addCupboard($cupboard);
            $manager->persist($cupboard);

            // Once the Cupboard instance has been saved to DB
            // it has a valid ID generated by Doctrine, and can thus
            // be saved as a future reference
            $this->addReference($cupboardReference, $cupboard);
        }

        foreach (self::getShelvesData() as [$shelfReference, $name, $description, $published, $memberReference]) {
            // Create new Shelf
            $shelf = new Shelf();
            $shelf->setName($name);
            $shelf->setDescription($description);
            $shelf->setPublished($published);
            $shelf->setCreated(new \DateTime());
            $shelf->setUpdated(new \DateTime());
            // Attribute the shelf to a member
            $member = $this->getReference($memberReference);
            $member->addShelf($shelf);
            $manager->persist($member);

            $this->addReference($shelfReference, $shelf);
        }

        foreach (self::getShoesData() as [$brand, $model, $cupboardReference, $shelfReference]) {
            // Create new Shoes
            $shoe = new Shoe();
            $shoe->setBrand($brand);
            $shoe->setModel($model);
            $shoe->setPurchased(new \DateTime());
            // Put the Shoes in its Cupboard
            $cupboard = $this->getReference($cupboardReference);
            $cupboard->addShoe($shoe);
            $manager->persist($cupboard);
            // Put the Shoes on a Shelf (on a single shelf for testing purpose)
            $shelf = $this->getReference($shelfReference);
            $shoe->addShelf($shelf);
            $manager->persist($shoe);
        }

        $manager->flush();
    }
}
